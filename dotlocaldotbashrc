#!/usr/bin/env bash

_bashrc_dir() {
  local dir="$1"

  test -f "$dir/.local.bashrc" && echo "$dir" && return 0
  test '/' = "$dir" && return 1

  _bashrc_dir "$(dirname "$1")"
}

BASHRC_HOME="$(_bashrc_dir "$PWD")"

dotlocaldotbashrc () {
  if [ "$1" = "init" ]; then

    if [ -f .local.bashrc ]; then
      echo "dotlocaldotbashrc: error: $PWD already has a .local.bashrc"
      return 1
    fi

    echo -e '#/usr/bin/env bash\n' >> .local.bashrc
    $EDITOR .local.bashrc
  fi

  _bashrc_dir "$PWD" || {
    echo "dotlocaldotbashrc: error: no parent directory with .local.bashrc. found"
    return
  }

  BASHRC_SOURCED="1"
  echo "dotlocaldotbashrc: source '$BASHRC_HOME/.local.bashrc'"
  source "$BASHRC_HOME/.local.bashrc"
}

lcd() {
  cd "$BASHRC_HOME/$1"
}

_bashrc_init() {
  local bashrc_dir
  local bashrc_temp

  # Return early if no .local.bashrc is found.
  bashrc_dir="$(_bashrc_dir "$PWD")"

  test -n "$BASHRC_TEMP" && test -z "$BASHRC_SOURCED" && {
    dotlocaldotbashrc
  }

  # The local bashrc path changed.
  test "$bashrc_dir" != "$BASHRC_HOME" && {

    wait

    # Do a fg to make sure you don't loose work
    if [[ -n $(jobs -p) ]]; then
      jobs
      echo "dotlocaldotbashrc: error: will not exit with jobs in background."
      return
    fi

    # Current bash process is a local bashrc session.
    test -n "$BASHRC_TEMP" && {
      echo "$PWD" > "$BASHRC_TEMP"
      echo "dotlocaldotbashrc: exit $BASHRC_HOME"
      exit
    }

    # Current bash process is the original (root) session.
    bashrc_temp="$(mktemp)"

    echo "dotlocaldotbashrc: open $bashrc_dir"
    BASHRC_TEMP="$bashrc_temp" bash

    test -s "$bashrc_temp" || exit
    cd "$(cat "$bashrc_temp")" || true
    _bashrc_init

  }

}

PROMPT_COMMAND="_bashrc_init;$PROMPT_COMMAND"
